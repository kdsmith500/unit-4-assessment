{"version":3,"sources":["components/Circles/Circles.js","components/CircleSelector/CircleSelector.js","App.js","serviceWorker.js","index.js"],"names":["Circles","props","react_default","a","createElement","className","circle1","circle2","circle3","circle4","CircleSelector","circleSelector1","onClick","handleCircleSelector1","circleSelector2","handleCircleSelector2","circleSelector3","handleCircleSelector3","circleSelector4","handleCircleSelector4","toggle","App","state","_this","setState","components_CircleSelector_CircleSelector","this","components_Circles_Circles","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7be0dd03.chunk.js","sourcesContent":["import React from 'react';\nimport './Circles.css';\n\nconst Circles = (props) => {\n  return (\n    <div className=\"Circles\">\n        <div className={props.circle1}>1</div>\n        <div className={props.circle2}>2</div>\n        <div className={props.circle3}>3</div>\n        <div className={props.circle4}>4</div>\n    </div>\n  );\n};\n\nexport default Circles;","import React from 'react';\nimport './CircleSelector.css';\n\nconst CircleSelector = (props) => {\n  return (\n    <div className=\"CircleSelector\">\n        <button className={props.circleSelector1} onClick={props.handleCircleSelector1}>Select Circle 1</button>\n        <button className={props.circleSelector2} onClick={props.handleCircleSelector2}>Select Circle 2</button>\n        <button className={props.circleSelector3} onClick={props.handleCircleSelector3}>Select Circle 3</button>\n        <button className={props.circleSelector4} onClick={props.handleCircleSelector4}>Select Circle 4</button>\n    </div>\n  );\n};\n\nexport default CircleSelector;","import React, { Component } from 'react';\nimport './App.css';\nimport Circles from './components/Circles/Circles';\nimport CircleSelector from './components/CircleSelector/CircleSelector';\n\nconst toggle = ['', 'selected'];\n\nclass App extends Component {\n  state = {\n    circleSelector1: '',\n    circleSelector2: '',\n    circleSelector3: '',\n    circleSelector4: '',\n    circle1: '',\n    circle2: '',\n    circle3: '',\n    circle4: ''\n  }\n\n  handleCircleSelector1 = () => {\n    if (this.state.circleSelector1 === '') {\n      this.setState({ circleSelector1: toggle[1] });\n      this.setState({ circle1: toggle[1] });\n    } else {\n      this.setState({ circleSelector1: toggle[0] });\n      this.setState({ circle1: toggle[0] });\n    }\n  }\n\n  handleCircleSelector2 = () => {\n    if (this.state.circleSelector2 === '') {\n      this.setState({ circleSelector2: toggle[1] });\n      this.setState({ circle2: toggle[1] });\n    } else {\n      this.setState({ circleSelector2: toggle[0] });\n      this.setState({ circle2: toggle[0] });\n    }\n  }\n\n  handleCircleSelector3 = () => {\n    if (this.state.circleSelector3 === '') {\n      this.setState({ circleSelector3: toggle[1] });\n      this.setState({ circle3: toggle[1] });\n    } else {\n      this.setState({ circleSelector3: toggle[0] });\n      this.setState({ circle3: toggle[0] });\n    }\n  }\n\n  handleCircleSelector4 = () => {\n    if (this.state.circleSelector4 === '') {\n      this.setState({ circleSelector4: toggle[1] });\n      this.setState({ circle4: toggle[1] });\n    } else {\n      this.setState({ circleSelector4: toggle[0] });\n      this.setState({ circle4: toggle[0] });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">UNIT 4 FINAL ASSESSMENT</header>\n        <main>\n          <CircleSelector\n            circleSelector1={this.state.circleSelector1}\n            circleSelector2={this.state.circleSelector2}\n            circleSelector3={this.state.circleSelector3}\n            circleSelector4={this.state.circleSelector4}\n            handleCircleSelector1={this.handleCircleSelector1}\n            handleCircleSelector2={this.handleCircleSelector2}\n            handleCircleSelector3={this.handleCircleSelector3}\n            handleCircleSelector4={this.handleCircleSelector4}\n          />\n          <Circles\n            circle1={this.state.circle1}\n            circle2={this.state.circle2}\n            circle3={this.state.circle3}\n            circle4={this.state.circle4}\n          />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}